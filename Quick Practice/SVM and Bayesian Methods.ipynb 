{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import rcParams\n",
    "from sklearn import svm\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "rcParams['figure.figsize'] = 6, 4\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1 (5+5+5+5+5=25 pts)\n",
    "\n",
    "### Consider the dataset HW2_task1.csv, a binary classification problem with two real-valued input attributes.  As you can see from the plot, the dataset is linearly separable. Train a linear SVM (setting C=100000 just to emphasize that no slack variables are allowed) and  answer the following five questions: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data\n",
    "data1=pd.read_csv('HW2_task1.csv')\n",
    "X=data1.iloc[:,:2]\n",
    "Y=data1.iloc[:,2]\n",
    "plt.gca()\n",
    "plt.scatter(X.iloc[:,0], X.iloc[:,1], s=50, c=Y, cmap=plt.cm.get_cmap('coolwarm', 2))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### a. Report the separating hyperplane (line)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.patches.FancyArrow at 0x1a13c3d470>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf = svm.SVC(kernel='linear', C=100000)\n",
    "clf.fit(X, Y)\n",
    "w = clf.coef_[0]\n",
    "a = -w[0]/w[1]\n",
    "x = np.linspace(-4, 5)\n",
    "y = a*x - (clf.intercept_[0]/w[1])\n",
    "plt.scatter(X.iloc[:,0], X.iloc[:,1], s=50, c=Y, cmap=plt.cm.get_cmap('coolwarm', 2))\n",
    "plt.plot(x, y, 'k-')\n",
    "plt.annotate('The separating \\n hyperplane', xy=(3,-2.5))\n",
    "plt.arrow(4, -3, -0.25, -1, fc=\"black\", ec=\"black\", head_width=0.2, head_length=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### b. List the support vectors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.22627536, -2.11810965],\n",
       "       [-1.5180363 , -0.06399383],\n",
       "       [ 0.93564585,  0.5969359 ]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.support_vectors_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### c. Calculate the upper and lower hyperplanes (lines) of the margin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a13dbac88>]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "b_up = clf.support_vectors_[0]\n",
    "# upper hyperplane\n",
    "y_up = a*x + (b_up[1] - a*b_up[0])\n",
    "\n",
    "b_down = clf.support_vectors_[-1]\n",
    "# lower hyperplane\n",
    "y_down = a*x + (b_down[1] - a*b_down[0])\n",
    "\n",
    "plt.scatter(X.iloc[:,0], X.iloc[:,1], s=50, c=Y, cmap=plt.cm.get_cmap('coolwarm', 2))\n",
    "plt.plot(x, y, 'k-')\n",
    "plt.plot(x, y_up, 'k--')\n",
    "plt.plot(x, y_down, 'k--')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### d. Compute the width of the margin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The width of the margin is 2.29861\n"
     ]
    }
   ],
   "source": [
    "def distance(m, b2, b1):\n",
    "    return abs(b2-b1)/np.sqrt(m**2 + 1) \n",
    "\n",
    "print('The width of the margin is %.5f'%distance(a, (b_up[1] - a*b_up[0]), (b_down[1] - a*b_down[0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### e. What would you expect to happen to the margin if the constant C was made very small?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The C parameter tells the SVM optimization how much you want to avoid misclassifying each training example. Smaller C means lower penalty. For small values of C, the optimization will choose a larger-margin hyperplane if that hyperplane does a better job of getting all the training points classified correctly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2 (4+8+8=20 pts)\n",
    "\n",
    "### Given the dataset provided below, answer the following two questions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data \n",
    "data2=pd.read_csv('HW2_task2.csv')\n",
    "X=data2.iloc[:,:2]\n",
    "Y=data2.iloc[:,2]\n",
    "\n",
    "plt.gca()\n",
    "plt.scatter(X.iloc[:,0], X.iloc[:,1], s=50, c=Y, cmap=plt.cm.get_cmap('coolwarm', 2));\n",
    "plt.show()\n",
    "\n",
    "# Generate training (X_train, Y_train) and testing (X_test, Y_test) datasets for out of sample test\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a. Train a polynomial SVM using the training set. Use the default arguments, and report both in-sample (training set) and out-of-sample (test set) classification accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample accuracy is 0.8134328358208955, while the out-of-sample accuracy is 0.8272727272727273\n"
     ]
    }
   ],
   "source": [
    "clf = svm.SVC(kernel='poly')\n",
    "clf.fit(X_train, Y_train)\n",
    "\n",
    "is_accuracy = (clf.predict(X_train)==Y_train).sum()/len(Y_train)\n",
    "os_accuracy = (clf.predict(X_test)==Y_test).sum()/len(Y_test)\n",
    "print('The in-sample accuracy is {}, while the out-of-sample accuracy is {}'.format(is_accuracy, os_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Next we will use the validation subset in order to pick the optimal parameters for the polynomial model.\n",
    "\n",
    "### b. Try polynomials of degree 1,2,3,4. For each degree, consider a variety of regularization constants from the range C=[math.exp(i) for i in np.linspace(-10,2*degree,200)] in order to evaluate the classifier performance over the validation set defined below.  Plot the graph of \"Accuracy vs log(C)\" for each degree.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Next we generate validation data (X_vali, Y_vali) from the training dataset. \n",
    "# Denote the remaining training data by (X_train_1, Y_train_1).\n",
    "X_train_1,X_vali,Y_train_1,Y_vali = train_test_split(X_train, Y_train, test_size=0.33, random_state=99)\n",
    "fig = plt.figure(figsize=(10,10))\n",
    "\n",
    "for i in range(1,5):\n",
    "    C = [np.exp(i) for i in np.linspace(-10,2*i,200)]\n",
    "    os_validation = []\n",
    "    for c in C:\n",
    "        clf = svm.SVC(kernel='poly', degree=i, C=c)\n",
    "        clf.fit(X_train_1, Y_train_1)\n",
    "        accuracy = (clf.predict(X_vali)==Y_vali).sum()/len(Y_vali)\n",
    "        os_validation.append(accuracy)\n",
    "    #print(len(os_validation))\n",
    "        #print(accuracy)\n",
    "    \n",
    "    plt.plot([np.log(y) for y in C], os_validation, label='%i degree polynomial'%i)\n",
    "    plt.legend()\n",
    "    plt.ylabel('Accuracy', fontsize=15)\n",
    "    plt.xlabel('log(C)', fontsize=15)\n",
    "# your code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### c. Choose the optimal degree and the optimal regularization constant C based on these graphs.  Use the optimal degree and C to compute and report the final out-of-sample accuracy of the best classification model selected. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### According to the graph above, the optimal accuracy comes out when degree=3 and log(C)~4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The out-of-sample accuracy is 0.8757575757575757\n"
     ]
    }
   ],
   "source": [
    "clf = svm.SVC(kernel='poly', degree=3, C=np.exp(4))\n",
    "clf.fit(X_train, Y_train)\n",
    "\n",
    "#is_accuracy = (clf.predict(X_train)==Y_train).sum()/len(Y_train)\n",
    "os_accuracy = (clf.predict(X_test)==Y_test).sum()/len(Y_test)\n",
    "print('The out-of-sample accuracy is {}'.format(os_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 3 (5+5=10pts).\n",
    "\n",
    "### This task is to be done by hand rather than using Python.\n",
    "\n",
    "Assume you have a data set as below. It contains records of cars with three features: the type of the car (sports or SUV), the color of the car (red or yellow), and the origin of the car (domestic or imported). And the labels for the data are yes (car was stolen) and no (car was not stolen).\n",
    "\n",
    "CarType,Color,Origin,Stolen?\n",
    "\n",
    "sports,red,domestic,yes\n",
    "\n",
    "sports,red,domestic,yes\n",
    "\n",
    "sports,red,domestic,yes\n",
    "\n",
    "sports,red,domestic,no\n",
    "\n",
    "SUV,red,domestic,no\n",
    "\n",
    "SUV,red,imported,yes\n",
    "\n",
    "SUV,yellow,imported,no\n",
    "\n",
    "SUV,yellow,imported,yes\n",
    "\n",
    "SUV,yellow,domestic,no\n",
    "\n",
    "sports,yellow,imported,no\n",
    "\n",
    "sports,red,imported,yes\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) Calculate the following sample probabilities:\n",
    "\n",
    "P(Yes) = 6/11\n",
    "\n",
    "P(No) = 5/11\n",
    "\n",
    "P(Red|Yes) = 5/6\n",
    "\n",
    "P(SUV|Yes) = 1/3\n",
    "\n",
    "P(Domestic|Yes) = 1/2\n",
    "\n",
    "P(Red|No) = 2/5\n",
    "\n",
    "P(SUV|No) = 3/5\n",
    "\n",
    "P(Domestic|No) = 3/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) Using naive Bayes classification, what is the probability that a red, domestic SUV will be stolen? Show your work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "p_y = (6/11) * ((5/6)*(1/3)*(1/2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "p_n = (5/11) * ((2/5)*(3/5)*(3/5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The p(Yes|Red, Domestic, SUV) is 0.536481\n"
     ]
    }
   ],
   "source": [
    "p = p_y/(p_y+p_n)\n",
    "p\n",
    "print('The p(Yes|Red, Domestic, SUV) is %f'%p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 4 (4+2+2+2=10pts)\n",
    "\n",
    "Consider the following problem involving Gaussian Naive Bayes classification.  We use eight factors to predict if people have diabetes or not. The variables are:\n",
    "\n",
    "y: The label (0 - no diabetes, 1 - diabetes)\n",
    "\n",
    "t_pre: Number of times pregnant\n",
    "\n",
    "glu: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n",
    "\n",
    "blood_p: Diastolic blood pressure (mm Hg)\n",
    "\n",
    "triceps: Triceps skin fold thickness (mm)\n",
    "\n",
    "serum: 2-Hour serum insulin (mu U/ml)\n",
    "\n",
    "b_m: Body mass index (weight in kg/(height in m)^2)\n",
    "\n",
    "pedigree_f: Diabetes pedigree function\n",
    "\n",
    "age: Age (years)\n",
    "\n",
    "### Using the data provided below, learn a Naive Bayes classifier from the training data and answer the following questions: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t_pre</th>\n",
       "      <th>glu</th>\n",
       "      <th>blood_p</th>\n",
       "      <th>triceps</th>\n",
       "      <th>serum</th>\n",
       "      <th>b_m</th>\n",
       "      <th>pedigree_f</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>387.0</td>\n",
       "      <td>31.2</td>\n",
       "      <td>0.295</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>35.8</td>\n",
       "      <td>0.545</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>20.8</td>\n",
       "      <td>0.733</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.118</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>32.9</td>\n",
       "      <td>0.867</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   t_pre    glu  blood_p  triceps  serum   b_m  pedigree_f   age\n",
       "0    3.0  158.0     64.0     13.0  387.0  31.2       0.295  24.0\n",
       "1    0.0   84.0     64.0     22.0   66.0  35.8       0.545  21.0\n",
       "2    9.0  120.0     72.0     22.0   56.0  20.8       0.733  48.0\n",
       "3    4.0  110.0     76.0     20.0  100.0  28.4       0.118  27.0\n",
       "4    2.0  100.0     66.0     20.0   90.0  32.9       0.867  28.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Training data\n",
    "data_train=pd.read_csv(\"HW2_task4_train.csv\") \n",
    "y_train=data_train.iloc[:,1] \n",
    "X_train=data_train.iloc[:,2:] \n",
    "\n",
    "# Testing data\n",
    "data_test=pd.read_csv(\"HW2_task4_test.csv\")\n",
    "y_test=data_test.iloc[:,1]\n",
    "X_test=data_test.iloc[:,2:]\n",
    "\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) What is the prediction accuracy for Naive Bayes, both in sample (on the training data) and out of sample (on the test data)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in sample accuracy is 0.758475, while the out of sample accuracy is 0.791139\n"
     ]
    }
   ],
   "source": [
    "gnb = GaussianNB()\n",
    "gnb_model = gnb.fit(X_train, y_train)\n",
    "is_accuracy = (gnb_model.predict(X_train)==y_train).sum()/len(y_train)\n",
    "os_accuracy = (gnb_model.predict(X_test)==y_test).sum()/len(y_test)\n",
    "\n",
    "print('The in sample accuracy is %f, while the out of sample accuracy is %f'%(is_accuracy, os_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) What is the prior probability of diabetes, learned from the training data?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The prior probability of diabetes learned from the training data is 0.300847\n"
     ]
    }
   ],
   "source": [
    "prior = y_train.sum()/len(y_train)\n",
    "print('The prior probability of diabetes learned from the training data is %f'%prior)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### c) What is the mean and variance of each input variable for patients with diabetes?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean and variance of each input variable for patients with diabetes are:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'t_pre_mu': 4.070422535211268,\n",
       " 't_pre_sigma': 3.518619630569318,\n",
       " 'glu_mu': 144.14084507042253,\n",
       " 'glu_sigma': 30.626457177996503,\n",
       " 'blood_p_mu': 74.56338028169014,\n",
       " 'blood_p_sigma': 13.799308879553351,\n",
       " 'triceps_mu': 33.478873239436616,\n",
       " 'triceps_sigma': 9.762697453543078,\n",
       " 'serum_mu': 209.2112676056338,\n",
       " 'serum_sigma': 126.92100079441515,\n",
       " 'b_m_mu': 35.22394366197182,\n",
       " 'b_m_sigma': 6.258490570844708,\n",
       " 'pedigree_f_mu': 0.6390422535211271,\n",
       " 'pedigree_f_sigma': 0.4390420232610254,\n",
       " 'age_mu': 35.7887323943662,\n",
       " 'age_sigma': 10.263549223145745}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_1 = data_train[data_train['y']==1].iloc[:,2:]\n",
    "nbc_1 = {}\n",
    "for each in X_1.columns:\n",
    "    nbc_1[each+'_mu'] = X_1[each].mean()\n",
    "    nbc_1[each+'_sigma'] = X_1[each].std()\n",
    "    \n",
    "print('The mean and variance of each input variable for patients with diabetes are:')\n",
    "nbc_1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### d) What is the mean and variance of each input variable for patients without diabetes?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean and variance of each input variable for patients without diabetes are:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'t_pre_mu': 2.690909090909091,\n",
       " 't_pre_sigma': 2.610060698804001,\n",
       " 'glu_mu': 111.46666666666667,\n",
       " 'glu_sigma': 24.69188998222512,\n",
       " 'blood_p_mu': 69.2060606060606,\n",
       " 'blood_p_sigma': 11.713290850878767,\n",
       " 'triceps_mu': 27.2,\n",
       " 'triceps_sigma': 10.436918524769798,\n",
       " 'serum_mu': 127.0060606060606,\n",
       " 'serum_sigma': 91.48613762575857,\n",
       " 'b_m_mu': 31.709090909090893,\n",
       " 'b_m_sigma': 6.337613405747429,\n",
       " 'pedigree_f_mu': 0.46868484848484815,\n",
       " 'pedigree_f_sigma': 0.29175032773322873,\n",
       " 'age_mu': 28.393939393939394,\n",
       " 'age_sigma': 8.537361911676147}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_0 = data_train[data_train['y']==0].iloc[:,2:]\n",
    "nbc_0 = {}\n",
    "for each in X_0.columns:\n",
    "    nbc_0[each+'_mu'] = X_0[each].mean()\n",
    "    nbc_0[each+'_sigma'] = X_0[each].std()\n",
    "    \n",
    "print('The mean and variance of each input variable for patients without diabetes are:')\n",
    "nbc_0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 5 (10+15=25 pts)\n",
    "\n",
    "We have an artificial data set split, where the training set contains both labeled and unlabeled data. Column 'y' is the label, and columns '0','1','2' are categorical variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   0  1  2\n",
      "0  4  6  6\n",
      "1  2  2  2\n",
      "2  2  6  2\n",
      "3  6  6  6\n",
      "4  1  2  2\n",
      "5  3  4  4\n",
      "6  6  1  6\n",
      "7  1  3  1\n",
      "8  5  1  6\n",
      "0    0\n",
      "1    1\n",
      "2    0\n",
      "3    0\n",
      "4    1\n",
      "5    0\n",
      "6    0\n",
      "7    1\n",
      "8    1\n",
      "Name: y, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "data_train=pd.read_csv(\"HW2_task5_train.csv\")\n",
    "y_Labeled_train=data_train.iloc[:,1] \n",
    "X_Labeled_train=data_train.iloc[:,2:] \n",
    "\n",
    "data_test=pd.read_csv(\"HW2_task5_test.csv\")\n",
    "y_Labeled_test=data_test.iloc[:,1]\n",
    "X_Labeled_test=data_test.iloc[:,2:]\n",
    "#X_Labeled_test.index = X_Labeled_test.index+9\n",
    "\n",
    "data_Unlabeled=pd.read_csv(\"HW2_task5_unlabeled.csv\")\n",
    "X_Unlabeled_train=data_Unlabeled.iloc[:,1:]\n",
    "X_Unlabeled_train.index = X_Unlabeled_train.index+9\n",
    "\n",
    "print (X_Labeled_train)\n",
    "print (y_Labeled_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) Learn a discrete Naive Bayes classifier from  X_Labeled_train, use it to predict the labels of X_Labeled_test, and report the classification accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The classification accuracy is 0.972222\n"
     ]
    }
   ],
   "source": [
    "gnb = GaussianNB()\n",
    "gnb_model = gnb.fit(X_Labeled_train, y_Labeled_train)\n",
    "accuracy = ((gnb_model.predict_proba(X_Labeled_test)>0.5)[:,1]==y_Labeled_test).sum()/len(y_Labeled_test)\n",
    "print('The classification accuracy is %f'%accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) Improve the classification by using the unlabeled data, data_Unlabeled, and the EM semi-supervised algorithm to predict the labels of X_Labeled_test, and report the new accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def initializeNaiveBayesRandom(X_Unlabeled):\n",
    "    nbc = {'prior':0.5}\n",
    "    for j in X_Unlabeled.columns:\n",
    "        thevalues = X_Unlabeled[j].unique()\n",
    "        nbc[j+'_1'] = {}\n",
    "        nbc[j+'_0'] = {}\n",
    "        for jj in thevalues:\n",
    "            nbc[j+'_1'][jj] = np.random.rand()\n",
    "            nbc[j+'_0'][jj] = np.random.rand()\n",
    "    return nbc\n",
    "\n",
    "def EM(X_Labeled,y_Labeled,X_Unlabeled,num_iters):\n",
    "\n",
    "    # initialize\n",
    "    \n",
    "    t = 0\n",
    "    \n",
    "    if len(y_Labeled) > 0:\n",
    "        nbc = trainNaiveBayesDiscrete(X_Labeled,y_Labeled)\n",
    "    else:\n",
    "        nbc = initializeNaiveBayesRandom(X_Unlabeled)\n",
    "    \n",
    "    while True:\n",
    "        t = t + 1\n",
    "        print ('Iteration',t,'of',num_iters)\n",
    "        \n",
    "        # E step - classify with nbc for unlabeled data only\n",
    "        y_pred_Unlabeled = testNaiveBayesDiscrete(X_Unlabeled,nbc)\n",
    "        \n",
    "        # M step\n",
    "        X_for_M_step = pd.DataFrame(pd.concat([X_Labeled,X_Unlabeled]))\n",
    "        #X_for_M_step.reset_index(drop=True, inplace=True) \n",
    "        y_for_M_step = pd.DataFrame(pd.concat([y_Labeled,y_pred_Unlabeled]))\n",
    "        #y_for_M_step.reset_index(drop=True, inplace=True) \n",
    "        #print(X_for_M_step,y_for_M_step)\n",
    "        prior = 1.*y_for_M_step.sum()/y_for_M_step.count()\n",
    "        nbc = {'prior':prior}\n",
    "        for j in X_for_M_step.columns:\n",
    "            nbc[j+'_1'] = {}\n",
    "            nbc[j+'_0'] = {}\n",
    "            for theindex in X_for_M_step.index:\n",
    "                current_X = X_for_M_step.loc[theindex,j]\n",
    "                current_y = y_for_M_step.loc[theindex]\n",
    "                if current_X in nbc[j+'_1']:\n",
    "                    nbc[j+'_1'][current_X] += current_y\n",
    "                else:\n",
    "                    nbc[j+'_1'][current_X] = current_y\n",
    "                if current_X in nbc[j+'_0']:\n",
    "                    nbc[j+'_0'][current_X] += (1.0-current_y)\n",
    "                else:\n",
    "                    nbc[j+'_0'][current_X] = 1.0-current_y\n",
    "            # normalize probabilities\n",
    "            tempsum = 0.0\n",
    "            for k in nbc[j+'_1']:\n",
    "                tempsum += nbc[j+'_1'][k]\n",
    "            for k in nbc[j+'_1']:\n",
    "                nbc[j+'_1'][k] /= tempsum\n",
    "            tempsum = 0.0\n",
    "            for k in nbc[j+'_0']:\n",
    "                tempsum += nbc[j+'_0'][k]\n",
    "            for k in nbc[j+'_0']:\n",
    "                nbc[j+'_0'][k] /= tempsum            \n",
    "                       \n",
    "        if t==num_iters:\n",
    "            break\n",
    "            \n",
    "    return nbc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trainNaiveBayesDiscrete(X,y):\n",
    "    prior = 1.*y.sum()/y.count()\n",
    "    nbc = {'prior':prior}\n",
    "    X_1 = X[y==1]\n",
    "    X_0 = X[y==0]\n",
    "    for j in X.columns:\n",
    "        nbc[j+'_1'] = X_1[j].value_counts(normalize=True) #notice!!! here \"normalize=True\"\n",
    "        nbc[j+'_0'] = X_0[j].value_counts(normalize=True)\n",
    "    return nbc\n",
    "\n",
    "def testNaiveBayesDiscrete(X,nbc):\n",
    "    y_pred = pd.Series(index=X.index) #content in the series is NaN\n",
    "    for i in X.index:\n",
    "        # compute odds of y=1\n",
    "        y_pred[i] = nbc['prior']/(1-nbc['prior']) # prior odds    ？？？？\n",
    "        for j in X.columns:\n",
    "            thevalue = X.loc[i,j]\n",
    "            if thevalue not in nbc[j+'_1']:\n",
    "                y_pred[i] = y_pred[i]*1E-3   #？？？？\n",
    "            if thevalue not in nbc[j+'_0']:\n",
    "                y_pred[i] = y_pred[i]*1E3  #？？？\n",
    "            if (thevalue in nbc[j+'_1']) & (thevalue in nbc[j+'_0']):\n",
    "                y_pred[i] = y_pred[i]*(nbc[j+'_1'][thevalue]+1E-3)/(nbc[j+'_0'][thevalue]+1E-3)\n",
    "        # convert odds to probability of y=1\n",
    "        y_pred[i] = y_pred[i]/(1.0+y_pred[i]) #？？？？\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1 of 50\n",
      "Iteration 2 of 50\n",
      "Iteration 3 of 50\n",
      "Iteration 4 of 50\n",
      "Iteration 5 of 50\n",
      "Iteration 6 of 50\n",
      "Iteration 7 of 50\n",
      "Iteration 8 of 50\n",
      "Iteration 9 of 50\n",
      "Iteration 10 of 50\n",
      "Iteration 11 of 50\n",
      "Iteration 12 of 50\n",
      "Iteration 13 of 50\n",
      "Iteration 14 of 50\n",
      "Iteration 15 of 50\n",
      "Iteration 16 of 50\n",
      "Iteration 17 of 50\n",
      "Iteration 18 of 50\n",
      "Iteration 19 of 50\n",
      "Iteration 20 of 50\n",
      "Iteration 21 of 50\n",
      "Iteration 22 of 50\n",
      "Iteration 23 of 50\n",
      "Iteration 24 of 50\n",
      "Iteration 25 of 50\n",
      "Iteration 26 of 50\n",
      "Iteration 27 of 50\n",
      "Iteration 28 of 50\n",
      "Iteration 29 of 50\n",
      "Iteration 30 of 50\n",
      "Iteration 31 of 50\n",
      "Iteration 32 of 50\n",
      "Iteration 33 of 50\n",
      "Iteration 34 of 50\n",
      "Iteration 35 of 50\n",
      "Iteration 36 of 50\n",
      "Iteration 37 of 50\n",
      "Iteration 38 of 50\n",
      "Iteration 39 of 50\n",
      "Iteration 40 of 50\n",
      "Iteration 41 of 50\n",
      "Iteration 42 of 50\n",
      "Iteration 43 of 50\n",
      "Iteration 44 of 50\n",
      "Iteration 45 of 50\n",
      "Iteration 46 of 50\n",
      "Iteration 47 of 50\n",
      "Iteration 48 of 50\n",
      "Iteration 49 of 50\n",
      "Iteration 50 of 50\n",
      "prior\n",
      "0    0.503146\n",
      "dtype: float64\n",
      "\n",
      "0_1\n",
      "{4: 0    0.087254\n",
      "Name: 0, dtype: float64, 2: 0    0.190449\n",
      "Name: 1, dtype: float64, 6: 0    0.000011\n",
      "Name: 3, dtype: float64, 1: 0    0.400282\n",
      "Name: 4, dtype: float64, 3: 0    0.238336\n",
      "Name: 5, dtype: float64, 5: 0    0.083668\n",
      "Name: 8, dtype: float64}\n",
      "\n",
      "0_0\n",
      "{4: 0    0.335359\n",
      "Name: 0, dtype: float64, 2: 0    0.054309\n",
      "Name: 1, dtype: float64, 6: 0    0.247158\n",
      "Name: 3, dtype: float64, 1: 0    0.053678\n",
      "Name: 4, dtype: float64, 3: 0    0.041125\n",
      "Name: 5, dtype: float64, 5: 0    0.268371\n",
      "Name: 8, dtype: float64}\n",
      "\n",
      "1_1\n",
      "{6: 0    0.000313\n",
      "Name: 0, dtype: float64, 2: 0    0.412434\n",
      "Name: 1, dtype: float64, 4: 0    0.056379\n",
      "Name: 5, dtype: float64, 1: 0    0.257993\n",
      "Name: 6, dtype: float64, 3: 0    0.213996\n",
      "Name: 7, dtype: float64, 5: 0    0.058885\n",
      "Name: 11, dtype: float64}\n",
      "\n",
      "1_0\n",
      "{6: 0    0.423401\n",
      "Name: 0, dtype: float64, 2: 0    0.059027\n",
      "Name: 1, dtype: float64, 4: 0    0.225386\n",
      "Name: 5, dtype: float64, 1: 0    0.038874\n",
      "Name: 6, dtype: float64, 3: 0    0.012809\n",
      "Name: 7, dtype: float64, 5: 0    0.240503\n",
      "Name: 11, dtype: float64}\n",
      "\n",
      "2_1\n",
      "{6: 0    0.041589\n",
      "Name: 0, dtype: float64, 2: 0    0.317109\n",
      "Name: 1, dtype: float64, 4: 0    0.036217\n",
      "Name: 5, dtype: float64, 1: 0    0.365867\n",
      "Name: 7, dtype: float64, 5: 0    0.031044\n",
      "Name: 11, dtype: float64, 3: 0    0.208175\n",
      "Name: 15, dtype: float64}\n",
      "\n",
      "2_0\n",
      "{6: 0    0.346293\n",
      "Name: 0, dtype: float64, 2: 0    0.084939\n",
      "Name: 1, dtype: float64, 4: 0    0.192839\n",
      "Name: 5, dtype: float64, 1: 0    0.000254\n",
      "Name: 7, dtype: float64, 5: 0    0.339317\n",
      "Name: 11, dtype: float64, 3: 0    0.036358\n",
      "Name: 15, dtype: float64}\n",
      "\n",
      "0     0.199539\n",
      "1     0.000101\n",
      "2     0.995513\n",
      "3     0.000077\n",
      "4     0.996523\n",
      "5     0.999909\n",
      "6     0.999909\n",
      "7     0.996993\n",
      "8     0.871366\n",
      "9     0.997671\n",
      "10    0.009586\n",
      "11    0.000047\n",
      "12    0.995074\n",
      "13    0.000093\n",
      "14    0.996738\n",
      "15    0.762885\n",
      "16    0.006165\n",
      "17    0.009586\n",
      "18    0.999914\n",
      "19    0.997671\n",
      "20    0.996523\n",
      "21    0.995074\n",
      "22    0.999933\n",
      "23    0.938700\n",
      "24    0.999909\n",
      "25    0.009586\n",
      "26    0.009796\n",
      "27    0.996993\n",
      "28    0.007539\n",
      "29    0.778703\n",
      "30    0.996523\n",
      "31    0.999858\n",
      "32    0.192110\n",
      "33    0.012492\n",
      "34    0.000002\n",
      "35    0.000189\n",
      "dtype: float64\n",
      "Out of sample prediction accuracy: 0.9444444444444444\n"
     ]
    }
   ],
   "source": [
    "naive_bayes_classifier=EM(X_Labeled_train,y_Labeled_train,X_Unlabeled_train,num_iters=50)\n",
    "for i,j in naive_bayes_classifier.items():\n",
    "    print (i)\n",
    "    print (j)\n",
    "    print ()\n",
    "y_pred_test = testNaiveBayesDiscrete(X_Labeled_test,naive_bayes_classifier)\n",
    "print(y_pred_test)\n",
    "# measure accuracy for the binary prediction task\n",
    "print ('Out of sample prediction accuracy:',1.0*sum((y_pred_test>0.5)==y_Labeled_test)/len(y_Labeled_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
